import { CookieOptions } from 'express';
import { day, Generator } from '@ducksclan/utils';
import { Middleware, Locals } from '../interfaces';

const ID: string = 'id';
const options: CookieOptions = {
    httpOnly: true,
    signed: true,
    maxAge: 30 * day('ms')
};

/**
 * Type of `request.locals` object for `taggingMiddleware` function.
 * @example
 * import { Middleware, TaggedLoclas } from '@ducksclan/wrapper-express';
 *
 * let middleware: Middleware<any, TaggedLoclas> = (
 *     (request, response, next) => {
 *         // do something
 *         response.locals.fingerprint
 *         response.locals.ip
 *     }
 * )
 */
export interface TaggedLoclas extends Locals {
    fingerprint: string;
    ip: string;
}

/**
 * Allows to collect ip address and fingerprint hash
 * generated by `express-fingerprint` module into `request.locals` object.
 * This middleware also stores the fingerprint hash
 * under the name of `id` in the cookie.
 * @returns middleware function
 * @example
 * import { initialization, taggingMiddleware } from '@ducksclan/wrapper-express';
 *
 * let cookieSecret: string = 'secret';
 * let app: express.Application = initialization(cookieSecret);
 *
 * app.use(taggingMiddleware());
 */
export default function taggingMiddleware(): Middleware<any, TaggedLoclas> {
    return (request, response, next) => {
        let fingerprint: string =
            request.fingerprint?.hash ||
            request.signedCookies[ID] ||
            Generator.sequence(32);

        response.locals.ip = request.ip;
        response.locals.fingerprint = fingerprint;

        response.cookie(ID, fingerprint, options);

        next();
    };
}
